
2 Suites
========

Dans cette section, nous allons introduire la notion de suite. Une suite
(de nombres) n’est rien d’autre qu’une succession infinie indexée (par
les nombres naturels) de nombres.

2.1 Définitions
---------------

.. |nbsp| unicode:: 0xA0 
   :trim:


**Définition 2.1.1.** |nbsp| Une *suite* est une fonction de :math:`\mathbb{N}` dans
:math:`\mathbb{R}` : :math:`f : \mathbb{N}\to \mathbb{R}`.

**Exemple 2.1.2.** Les fonctions suivantes :

.. math::

   \begin{aligned}
       f : \mathbb{N}&\to \mathbb{R}\\
       n &\mapsto 2
       \end{aligned}

et

.. math::

   \begin{aligned}
       g : \mathbb{N}&\to \mathbb{R}\\
       n &\mapsto 2+ \frac{1}{n+1}
       \end{aligned}

sont deux suites dont les termes sont :math:`2,2,2,2,2,2,...` et
:math:`2+ \frac{1}{1},2+ \frac{1}{2},2+ \frac{1}{3},2+ \frac{1}{4},2+ \frac{1}{5},...`.
On ne peut évidemment pas donner tous les termes de ces deux suites : il
y en a une infinité.

**Contre-exemple 2.1.3.** La fonction

.. math::

   \begin{aligned}
       f : \mathbb{R}&\to \mathbb{R}\\
       x &\mapsto x^2
       \end{aligned}

n’est pas une suite.

| 

**Notation.** Les lettres :math:`s,t,u,v` sont souvent utilisées pour les suites.
Plutôt que d’écrire :math:`s : \mathbb{N}\to \mathbb{R}` pour déclarer
une suite, on écrit souvent :math:`{(s_n)}_{n \in \mathbb{N}}`. Plutôt
que d’écrire :math:`s(n)`, ce qui est souvent nommé terme de rang
:math:`n` de la suite :math:`s`, on écrit souvent :math:`s_n`. Dans ce
document, nous reprendrons ces conventions communément admises.

**Remarque 2.1.4.** Comme pour les fonctions, il est possible de représenter les suites dans
un graphe orthonormé. Par exemple, la suite

.. math::

   \begin{aligned}
       g : \mathbb{N}&\to \mathbb{R}\\
       n &\mapsto 2+ \frac{1}{n+1}
       \end{aligned}

a le graphe suivant :

.. tikz:: 

		\draw[step=1cm,gray,very thin] (0,0) grid (5,5);

		\draw[very thick,->] (0,0) -- (5,0) node[anchor=south west] {x};
		\draw[very thick,->] (0,0) -- (0,5) node[anchor=south west] {y};
		
		\foreach \x in {0,1,2,3,4,5}
		\draw (\x cm,1pt) -- (\x cm,-1pt) node[anchor=north] {$\x$};
		\draw[very thick,blue] (0,2+0.7) node[anchor=south] {\large{$\bullet$}};
		\draw[very thick,blue] (1,2+0.2) node[anchor=south] {\large{$\bullet$}};
		\draw[very thick,blue] (2,2+0.0333333) node[anchor=south] {\large{$\bullet$}};
		\draw[very thick,blue] (3,2-0.05) node[anchor=south] {\large{$\bullet$}};
		\draw[very thick,blue] (4,2-0.1) node[anchor=south] {\large{$\bullet$}};
		\draw[very thick,blue] (5,2-0.13) node[anchor=south] {\large{$\bullet$}};
		\foreach \y in {0,1,2,3,4,5}
		\draw (1pt,\y cm) -- (-1pt,\y cm) node[anchor=east] {$\y$};

Attention à ne pas relier les points du graphe ! Dans le cas des suites,
le domaine de définition est :math:`\mathbb{N}`, pas :math:`\mathbb{R}`
!

| Il y a deux manières de définir une suite particulière. On peut la
  définir comme une fonction : c’est ce qui a été fait à l’exemple 2.1.2. Dans ce cas, on dit qu’on donne la suite
  *en fonction du rang* puisqu’on possède alors une formule qui nous
  permet de calculer directement le terme de rang :math:`n` de la suite
  (:math:`n` étant un nombre naturel choisi).
| Mais il existe une autre manière de déclarer une suite, dite *par
  récurrence*. Celle-ci consiste à donner le ou les premiers termes de
  la suite, puis donner une règle générale permettant de calculer tous
  les termes suivants à partir de ce ou ces premiers termes. Plutôt que
  de donner la définition générale et abstraite de suite définie par
  récurrence (qui est assez technique), donnons un exemple très connu de
  suite définie par récurrence : la suite de Fibonacci.

| 

**Exemple 2.1.5.** 

  La suite de Fibonacci est l’unique suite :math:`{(F_n)}_{n \in \mathbb{N}}` telle que :
  
  .. math::

     \left\{
         \begin{array}{l}
         F_0 = 1 \\
         F_1 = 1 \\
         F_{n+2} = F_{n+1} + F_{n} ~~~~~~ n \in \mathbb{N}
         \end{array}
         \right.

  Autrement dit, on donne les deux premiers termes de la suite,
  :math:`F_0 =1` et :math:`F_1 = 1`, et la règle générale nous dit ici
  que pour obtenir un terme de la suite, il suffit d’additionner les
  deux précédents. Par exemple, que vaut le terme de rang :math:`2` de
  la suite, c’est-à-dire :math:`F_2` ? En prenant :math:`n=0` dans la
  formule générale, on sait qu’on doit avoir pour la suite
  :math:`{(F_n)}_{n \in \mathbb{N}}` :

  .. math:: F_{0+2} = F_{0+1} + F_{0}

  Autrement dit :

  .. math:: F_{2} = F_{1} + F_{0}

  Donc :

  .. math:: F_{2} = 1 + 1 = 2

  Puisqu’on connait :math:`F_2`, on peut alors particulariser la formule
  générale non plus en :math:`n=0` mais en :math:`n=1` pour découvrir
  comment calculer :math:`F_3` à partir de :math:`F_2` et :math:`F_1` :

  .. math:: F_{3} = F_{2} + F_{1} = 2+1=3

  Et ainsi de suite. On peut calculer que les premiers termes de la
  suite de Fibonacci sont :math:`1,1,2,3,5,8,13,21,34,...`.
|   
| La suite de Fibonacci est fascinante et très populaire car elle
  apparaît spontanément dans la nature, que ce soit dans les fleurs de
  tournesol ou dans les coquilles de certains mollusques. De plus, elle
  est reliée à un nombre qui a eu autrefois énormément d’importance en
  architecture et en art : le nombre d’or. Malheureusement, nous n’avons
  pas la possibilité dans ce cours de nous étendre sur le sujet.

L’exemple de la suite de Fibonacci comprend toute la généralité
nécessaire pour manipuler les suites définies par récurrence que nous
rencontrerons. La plupart du temps, seul le premier terme de la suite
est donné et la règle générale de récurrence ne dépent seulement que
d’un seul terme (contrairement au cas de la suite de Fibonacci, où elle
dépend de deux termes (:math:`F_{n+1}` et :math:`F_n`)).

**Remarque 2.1.6.** Une suite définie en fonction du rang est souvent plus facile à
manipuler qu’une suite donnée par récurrence, mais il est parfois plus
facile de définir une suite par récurrence.

Dans les deux sections suivantes, nous allons étudier deux types de
suites pour lesquels il est aisé de passer de la formulation en fonction
du rang à la formulation par récurrence et vice-versa.

| 

**Exemple 2.1.7.** Soit :math:`{(s_n)}_{n \in \mathbb{N}}` une suite telle que :

#. :math:`s_n = n^3 -n +1`        :math:`(n \in \mathbb{N})`

#. :math:`s_n = \frac{2}{\sqrt{n+1}}`        :math:`(n \in \mathbb{N})`

#. :math:`\left\{\begin{array}{l}s_0 = 1 \\s_1 = 2 \\s_{n+2} = F_{n+1} + 2s_{n} - 6 ~~~~~~ n \in \mathbb{N}\end{array}\right.`

#. :math:`\left\{\begin{array}{l}s_0 = -2 \\s_{n+1} = \frac{1}{4}(s_{n})^3 +4 ~~~~~~ n \in \mathbb{N}\end{array}\right.`

#. :math:`s_n = \frac{1}{5^{n-1}}`        :math:`(n \in \mathbb{N})`

Pour chacune de ces possibilités :

-  Calculer :math:`s_0`, :math:`s_1` et le terme de rang :math:`3`.

-  Représenter graphiquement les premiers termes de la suite.

.. inginious:: suite1_1
.. inginious:: suite1_2
.. inginious:: suite1_3
.. inginious:: suite1_4
.. inginious:: suite1_5

